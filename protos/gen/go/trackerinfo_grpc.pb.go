// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: trackerinfo.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackerInfoClient is the client API for TrackerInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackerInfoClient interface {
	Full(ctx context.Context, in *TrackerInfoRequest, opts ...grpc.CallOption) (*TrackerFullInfoResponse, error)
	Short(ctx context.Context, in *TrackerInfoRequest, opts ...grpc.CallOption) (*TrackerShortInfoResponse, error)
}

type trackerInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerInfoClient(cc grpc.ClientConnInterface) TrackerInfoClient {
	return &trackerInfoClient{cc}
}

func (c *trackerInfoClient) Full(ctx context.Context, in *TrackerInfoRequest, opts ...grpc.CallOption) (*TrackerFullInfoResponse, error) {
	out := new(TrackerFullInfoResponse)
	err := c.cc.Invoke(ctx, "/trackerinfo.TrackerInfo/Full", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerInfoClient) Short(ctx context.Context, in *TrackerInfoRequest, opts ...grpc.CallOption) (*TrackerShortInfoResponse, error) {
	out := new(TrackerShortInfoResponse)
	err := c.cc.Invoke(ctx, "/trackerinfo.TrackerInfo/Short", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerInfoServer is the server API for TrackerInfo service.
// All implementations must embed UnimplementedTrackerInfoServer
// for forward compatibility
type TrackerInfoServer interface {
	Full(context.Context, *TrackerInfoRequest) (*TrackerFullInfoResponse, error)
	Short(context.Context, *TrackerInfoRequest) (*TrackerShortInfoResponse, error)
	mustEmbedUnimplementedTrackerInfoServer()
}

// UnimplementedTrackerInfoServer must be embedded to have forward compatible implementations.
type UnimplementedTrackerInfoServer struct {
}

func (UnimplementedTrackerInfoServer) Full(context.Context, *TrackerInfoRequest) (*TrackerFullInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Full not implemented")
}
func (UnimplementedTrackerInfoServer) Short(context.Context, *TrackerInfoRequest) (*TrackerShortInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Short not implemented")
}
func (UnimplementedTrackerInfoServer) mustEmbedUnimplementedTrackerInfoServer() {}

// UnsafeTrackerInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackerInfoServer will
// result in compilation errors.
type UnsafeTrackerInfoServer interface {
	mustEmbedUnimplementedTrackerInfoServer()
}

func RegisterTrackerInfoServer(s grpc.ServiceRegistrar, srv TrackerInfoServer) {
	s.RegisterService(&TrackerInfo_ServiceDesc, srv)
}

func _TrackerInfo_Full_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerInfoServer).Full(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trackerinfo.TrackerInfo/Full",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerInfoServer).Full(ctx, req.(*TrackerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerInfo_Short_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerInfoServer).Short(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trackerinfo.TrackerInfo/Short",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerInfoServer).Short(ctx, req.(*TrackerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackerInfo_ServiceDesc is the grpc.ServiceDesc for TrackerInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackerInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trackerinfo.TrackerInfo",
	HandlerType: (*TrackerInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Full",
			Handler:    _TrackerInfo_Full_Handler,
		},
		{
			MethodName: "Short",
			Handler:    _TrackerInfo_Short_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trackerinfo.proto",
}
